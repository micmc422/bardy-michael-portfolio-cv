{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "next/core-web-vitals" // Recommandé par Next.js
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json" // Indique à ESLint d'utiliser votre tsconfig.json
  },
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks"
  ],
  "settings": {
    "react": {
      "version": "detect" // Détecte automatiquement la version de React
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true, // Toujours essayer de résoudre les types
        "project": "./tsconfig.json" // Assurez-vous que le resolver de l'import respecte aussi votre tsconfig
      }
    }
  },
  "rules": {
    "@typescript-eslint/no-require-imports":"off",
    "no-extra-boolean-cast": "off",
    "no-useless-escape": "off",
    "semi": "off",
    "no-case-declarations": "off",
    // Règles ESLint générales
    "indent": "off", // Géré par Prettier
    "no-unused-vars": "off", // Désactivé car @typescript-eslint/no-unused-vars gère mieux cela
    "no-empty-function": "off", // Désactivé car @typescript-eslint/no-empty-function gère mieux cela
    "arrow-body-style": "off", // Préfère le corps implicite pour les fonctions fléchées simples
    "prefer-const": "error", // Force l'utilisation de const quand la variable n'est pas réassignée
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports", // Préfère 'import type' pour les imports qui sont uniquement des types
        "disallowTypeAnnotations": true, // Interdit les annotations de type dans les imports si 'prefer' est activé
        "fixStyle": "inline-type-imports" // Ajoute 'type' inline si possible: import { type MyType } from '...'
      }
    ], // Règles TypeScript (via @typescript-eslint)
    "@typescript-eslint/explicit-module-boundary-types": "off", // Désactive l'exigence des types explicites pour les exports
    "@typescript-eslint/no-explicit-any": "warn", // Permet 'any' mais avec un avertissement
    "@typescript-eslint/no-unused-vars": [
      "error", // <- Passez de "warn" à "error"
      {
        "args": "after-used", // Signale les arguments inutilisés sauf ceux précédés d'un underscore (voir ci-dessous)
        "ignoreRestSiblings": true, // Ne signale pas les variables restantes dans les déstructurations d'objets (e.g., const { a, ...rest } = obj;)
        "varsIgnorePattern": "^_", // Ignore les variables dont le nom commence par un underscore (ex: _unusedVar)
        "argsIgnorePattern": "^_" // Ignore les arguments de fonction dont le nom commence par un underscore (ex: _event)
      }
    ],    "@typescript-eslint/no-empty-object-type": "off",
    "@typescript-eslint/no-empty-function": "warn", // Warn pour les fonctions vides
    "@typescript-eslint/no-non-null-assertion": "off", // Permet l'opérateur non-null assertion (!)
    "@typescript-eslint/no-inferrable-types": "off", // Ne pas forcer la déduction de type
    "@typescript-eslint/ban-ts-comment": "off", // Permet ts-ignore avec une description
    // Règles React (via eslint-plugin-react)
    "react/react-in-jsx-scope": "off", // Plus nécessaire avec React 17+ (Next.js le gère)
    "react/prop-types": "off", // Désactivé car TypeScript gère les prop-types
    "react/display-name": "off", // Peut être désactivé si vous utilisez des composants anonymes fréquemment
    "react/jsx-uses-react": "off", // Plus nécessaire avec la nouvelle transformation JSX
    // Règles React Hooks (via eslint-plugin-react-hooks)
    "react-hooks/rules-of-hooks": "error", // Vérifie les règles des Hooks
    "react-hooks/exhaustive-deps": "warn" // Vérifie les dépendances des Hooks
    // Règles Prettier (si vous l'utilisez comme plugin ESLint)
  }
}