import { baseURL } from '@/app/resources';
import { getPosts } from '@/app/utils/serverActions';
import { NextResponse } from 'next/server';
import { postToFacebook } from './postToFacebook';
import { postToLinkedIn } from './postToLinkedIn'; // D√©comment√© pour l'exemple d'am√©lioration
import { get } from '@vercel/edge-config';

// Environnement d'ex√©cution (d√©veloppement ou production)
const env = process.env.NODE_ENV;
// Cl√© utilis√©e dans Edge Config pour stocker les slugs des articles partag√©s
const SHARED_ARTICLES_KEY = 'sharedArticlesSlugs';

/**
 * G√®re la requ√™te GET pour la publication automatique d'articles sur les m√©dias sociaux.
 * Cette fonction est destin√©e √† √™tre appel√©e par une t√¢che planifi√©e (cron job) via Vercel Cron Jobs.
 * Elle inclut des v√©rifications d'autorisation, de jour de la semaine, et un m√©canisme
 * pour √©viter les partages d'articles d√©j√† diffus√©s via Edge Config.
 *
 * @param req L'objet Request de la requ√™te Next.js.
 * @returns Une r√©ponse JSON indiquant le statut de l'op√©ration et des messages pertinents.
 */
export async function GET(req: Request) {
    // === Section 1 : V√©rifications Pr√©liminaires et S√©curit√© ===

    // V√©rification de l'autorisation:
    // En production, un jeton secret est requis dans l'en-t√™te 'Authorization' pour s√©curiser le point de terminaison.
    // Cela emp√™che les appels non autoris√©s. En d√©veloppement, cette v√©rification est d√©sactiv√©e pour faciliter les tests.
    if (!(env === 'development') && req.headers.get('Authorization') !== `Bearer ${process.env.CRON_SECRET}`) {
        console.error("üö´ Tentative d'acc√®s non autoris√© √† la route de partage automatique.");
        return NextResponse.json({ status: 'Unauthorized', code: 401, message: 'Acc√®s non autoris√©. Jeton CRON_SECRET manquant ou invalide.' });
    }

    // R√©cup√©ration du jour de la semaine actuel pour la logique de planification.
    // getDay() retourne 0 pour Dimanche, 1 pour Lundi, ..., 6 pour Samedi.
    const today = new Date();
    const dayOfWeek = today.getDay();

    // V√©rification des jours o√π le partage est d√©sactiv√© : Samedi (6), Dimanche (0), et Mercredi (3).
    // Cette r√®gle m√©tier assure que les publications ne se font pas pendant certaines p√©riodes.
    if (dayOfWeek === 0 || dayOfWeek === 6 || dayOfWeek === 3) {
        const dayName = today.toLocaleDateString('fr-FR', { weekday: 'long' });
        console.log(`‚è±Ô∏è Partage d√©sactiv√© aujourd'hui (${dayName}). Reprise les jours autoris√©s.`);
        return NextResponse.json({ status: 'skipped', message: `Partage d√©sactiv√© le week-end et le mercredi. Actuellement, c'est ${dayName}.` });
    }

    // === Section 2 : R√©cup√©ration des Articles et de l'√âtat de Partage ===

    // R√©cup√®re le(s) dernier(s) article(s) publi√©(s).
    // La limite de 1 est un choix actuel ; elle pourrait √™tre augment√©e si vous souhaitez partager plus d'un article par ex√©cution.
    const articles = await getPosts({ limit: 1 });

    // R√©cup√®re la liste des slugs d'articles pr√©c√©demment partag√©s depuis Vercel Edge Config.
    // Edge Config est utilis√© ici comme un stockage persistant rapide pour l'√©tat de l l'application distribu√©e.
    // Si la cl√© n'existe pas ou la valeur est vide, un tableau vide est utilis√© par d√©faut.
    let sharedArticlesSlugs: string[] = (await get(SHARED_ARTICLES_KEY)) || [];

    // === Section 3 : Traitement et Partage des Articles ===

    // Parcours les articles r√©cup√©r√©s. Dans cet exemple, il n'y a qu'un seul article gr√¢ce √† `limit: 1`.
    for (const article of articles) {
        // V√©rifie si l'article est r√©cent (publi√© il y a moins de 24 heures) et a bien une date de publication.
        if (article.metadata.publishedAt) {
            // V√©rifie si l'article a d√©j√† √©t√© partag√© pour √©viter les doublons.
            // C'est essentiel pour ne pas spammer les flux sociaux avec le m√™me contenu.
            if (sharedArticlesSlugs.includes(article.slug)) {
                console.log(`‚è© L'article "${article.slug}" a d√©j√† √©t√© partag√©. Pas de nouvelle diffusion.`);
                return NextResponse.json({ status: 'skipped', message: `L'article "${article.slug}" a d√©j√† √©t√© partag√©.` });
            }

            // Pr√©pare le payload de donn√©es pour les fonctions de partage.
            const postData = {
                title: article.metadata.title as string,
                description: article.metadata.description as string,
                url: `${baseURL}/blog/${article.slug}` // Construit l'URL compl√®te de l'article.
            };

            // Publie l'article sur toutes les plateformes sociales configur√©es en parall√®le.
            // `Promise.all` assure que toutes les tentatives de publication sont lanc√©es simultan√©ment.
            try {
                await Promise.all([
                    postToFacebook(postData),
                    postToLinkedIn(postData)
                ]);

                console.log(`‚úÖ Article "${article.slug}" partag√© avec succ√®s sur les m√©dias sociaux.`);

                // Met √† jour la liste locale des slugs partag√©s.
                // Le nouveau slug est ajout√© au d√©but (le plus r√©cent).
                sharedArticlesSlugs.unshift(article.slug);
                // Le tableau est tronqu√© pour ne conserver que les 4 derniers slugs,
                // afin d'√©viter une croissance illimit√©e et de ne suivre que les partages r√©cents.
                if (sharedArticlesSlugs.length > 4) {
                    sharedArticlesSlugs = sharedArticlesSlugs.slice(0, 4);
                }

                // Met √† jour Vercel Edge Config avec la liste r√©vis√©e des slugs partag√©s.
                // Cela utilise l'API Vercel Edge Config directement, car la fonction `set` du SDK Edge Config
                // n'est pas con√ßue pour les environnements Node.js (comme les API Routes) mais plut√¥t pour les Edge Functions.
                const updateRes = await fetch(
                    `https://api.vercel.com/v1/edge-config/${process.env.VERCEL_EDGE_CONFIG_ID}/items?teamId=${process.env.VERCEL_TEAM_ID}`,
                    {
                        method: 'PATCH', // Utilise PATCH pour mettre √† jour des √©l√©ments sp√©cifiques.
                        headers: {
                            Authorization: `Bearer ${process.env.VERCEL_API_TOKEN}`, // Jeton d'API Vercel requis pour l'authentification.
                            'Content-Type': 'application/json', // Indique que le corps de la requ√™te est du JSON.
                        },
                        body: JSON.stringify({
                            items: [
                                {
                                    operation: 'update', // Sp√©cifie l'op√©ration de mise √† jour.
                                    key: SHARED_ARTICLES_KEY, // La cl√© √† mettre √† jour dans Edge Config.
                                    value: sharedArticlesSlugs, // La nouvelle valeur du tableau de slugs.
                                },
                            ],
                        }),
                    }
                );

                // V√©rifie si la mise √† jour de l'Edge Config a √©chou√©.
                if (!updateRes.ok) {
                    const errorResult = await updateRes.json();
                    console.error("‚ùå √âchec de la mise √† jour de l'Edge Config apr√®s le partage :", errorResult);
                    return NextResponse.json({ status: 'error', message: "√âchec de la mise √† jour de l'Edge Config apr√®s le partage de l'article." });
                }

                return NextResponse.json({ status: 'done', message: `Article "${article.slug}" partag√© et Edge Config mis √† jour.`, sharedCount: articles.length });

            } catch (socialError) {
                // Capture les erreurs sp√©cifiques aux fonctions de partage social (Facebook, LinkedIn).
                console.error(`‚ùå √âchec du partage de l'article "${article.slug}" sur une ou plusieurs plateformes :`, socialError);
                return NextResponse.json({ status: 'error', message: `Erreur lors du partage social pour l'article "${article.slug}".` });
            }

        } else {
            // Cas o√π l'article n'est pas √©ligible au partage (ou sans date de publication).
            console.log(`‚è≠Ô∏è L'article "${article.slug}" a plus de 24 heures ou n'est pas publi√©. Il ne sera pas diffus√©.`);
            return NextResponse.json({
                status: 'skipped',
                message: `L'article "${article.slug}" n'est pas √©ligible au partage (non publi√©).`
            });
        }
    }

    // Si aucun article n'a √©t√© trouv√© ou si la liste des articles √©tait vide.
    console.log('‚ÑπÔ∏è Aucun article √©ligible trouv√© √† partager pour cette ex√©cution.');
    return NextResponse.json({ status: 'no_articles', message: 'Aucun article √©ligible trouv√© √† partager.' });
}

