import { get } from '@vercel/edge-config';
import ogs from 'open-graph-scraper'; // Importation de la biblioth√®que pour scraper les m√©tadonn√©es Open Graph

/**
 * Publie un article donn√© sur LinkedIn en tant que post UGC (User Generated Content).
 * Utilise les m√©tadonn√©es Open Graph de l'URL de l'article pour un aper√ßu riche.
 *
 * @param article Un objet contenant les d√©tails de l'article (titre, description, URL).
 * Le champ `url` est crucial pour l'extraction Open Graph.
 * Ex: { title: "Mon Titre", description: "Ma Description", url: "https://example.com/article" }
 * @returns {Promise<void>} Une promesse qui se r√©sout en cas de succ√®s, ou rejette une erreur d√©taill√©e en cas d'√©chec.
 */
export async function postToLinkedIn(article: { title: string; description: string; url: string }): Promise<void> {
    // === Section 1 : R√©cup√©ration des Tokens et Scrapping Open Graph ===

    // 1. R√©cup√©ration du token d'acc√®s LinkedIn depuis Vercel Edge Config.
    const accessToken = (await get('linkedin_token')) as string;

    // V√©rification du token d'acc√®s. Essentiel pour l'authentification.
    if (!accessToken) {
        const errorMessage = 'Erreur critique: Le token d\'acc√®s LinkedIn est manquant dans Edge Config. Impossible de publier.';
        console.error(errorMessage);
        throw new Error(errorMessage);
    }

    // R√©cup√©ration de l'URN (Uniform Resource Name) de l'auteur (personne ou organisation) depuis les variables d'environnement.
    // Cet URN identifie l'entit√© qui publie le contenu sur LinkedIn (ex: urn:li:person:12345, urn:li:organization:67890).
    const personURN = process.env.LINKEDIN_AUTHOR_URN;

    // V√©rification de l'URN de l'auteur. Obligatoire pour savoir qui publie.
    if (!personURN) {
        const errorMessage = 'Erreur critique: L\'URN de l\'auteur LinkedIn (LINKEDIN_AUTHOR_URN) est manquant dans les variables d\'environnement. Impossible de publier.';
        console.error(errorMessage);
        throw new Error(errorMessage);
    }

    // Utilisation de `open-graph-scraper` pour extraire les m√©tadonn√©es Open Graph de l'URL de l'article.
    // Cela permet √† LinkedIn de cr√©er un aper√ßu riche et attrayant du lien.
    try {
        const ogResult = await ogs({ url: article.url });
        const ogData = ogResult.result;

        // console.log('Donn√©es OpenGraph r√©cup√©r√©es :', ogData); // Utile pour le d√©bogage

        // Fallback si les champs Open Graph sont manquants.
        // On utilise les donn√©es de l'article si les m√©tadonn√©es OG ne sont pas trouv√©es.
        const ogTitle = ogData.ogTitle || article.title;
        const ogDescription = ogData.ogDescription || article.description;
        let ogImage: string | undefined;

        // Extraction s√©curis√©e de l'URL de l'image Open Graph.
        // ogImage peut √™tre un tableau, un objet ou undefined.
        if (ogData.ogImage && Array.isArray(ogData.ogImage) && ogData.ogImage.length > 0) {
            // Assure que le premier √©l√©ment est un objet et contient une propri√©t√© 'url'.
            if (typeof ogData.ogImage[0] === 'object' && ogData.ogImage[0] !== null && 'url' in ogData.ogImage[0]) {
                ogImage = (ogData.ogImage[0] as { url: string }).url;
            }
        } else if (typeof ogData.ogImage === 'object' && ogData.ogImage !== null && 'url' in ogData.ogImage) {
            // Si ogImage est un objet simple avec une url.
            ogImage = (ogData.ogImage as { url: string }).url;
        }


        // === Section 2 : Construction du Corps de la Requ√™te de Publication (UGC Post) ===

        // Construction du payload JSON conforme √† l'API UGC Posts de LinkedIn.
        const postBody = {
            author: personURN, // L'URN de l'auteur du post.
            lifecycleState: 'PUBLISHED', // D√©finit le post comme "PUBLISHED" directement (au lieu de 'DRAFT').
            specificContent: {
                // Type de contenu sp√©cifique pour un partage d'article.
                'com.linkedin.ugc.ShareContent': {
                    shareCommentary: {
                        text: ogTitle // Le commentaire qui accompagne le partage (souvent le titre de l'article).
                    },
                    shareMediaCategory: 'ARTICLE', // Indique que le m√©dia partag√© est un article.
                    media: [
                        {
                            status: 'READY', // Statut du m√©dia li√©.
                            description: {
                                text: ogDescription // Description de l'aper√ßu de l'article.
                            },
                            originalUrl: article.url, // L'URL originale de l'article.
                            title: {
                                text: ogTitle // Titre de l'aper√ßu de l'article.
                            },
                            // Conditionnellement ajoute l'image si elle a √©t√© trouv√©e.
                            ...(ogImage && {
                                thumbnails: [
                                    { resolvedUrl: ogImage } // URL de l'image de l'aper√ßu.
                                ]
                            })
                        }
                    ]
                }
            },
            // Visibilit√© du post : 'PUBLIC' signifie visible par tout le r√©seau LinkedIn.
            visibility: {
                'com.linkedin.ugc.MemberNetworkVisibility': 'PUBLIC'
            }
        };

        // === Section 3 : Envoi de la Requ√™te API et Gestion des Erreurs ===

        // Envoi de la requ√™te HTTP POST √† l'API LinkedIn pour cr√©er le post UGC.
        const res = await fetch('https://api.linkedin.com/v2/ugcPosts', {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${accessToken}`, // Jeton d'acc√®s pour l'authentification.
                'X-Restli-Protocol-Version': '2.0.0', // En-t√™te requis par l'API LinkedIn.
                'Content-Type': 'application/json' // Indique que le corps de la requ√™te est du JSON.
            },
            body: JSON.stringify(postBody) // Convertit l'objet JavaScript en cha√Æne JSON.
        });

        // 4. Gestion de la r√©ponse de l'API.
        if (!res.ok) {
            const errorText = await res.text(); // Tente de lire le corps de la r√©ponse d'erreur.
            const errorMessage = `‚ùå √âchec de la publication LinkedIn: Statut ${res.status} - ${res.statusText}. D√©tails: ${errorText}`;
            console.error(errorMessage);
            throw new Error(errorMessage); // Relance une erreur d√©taill√©e.
        }

        console.log('üéâ Article post√© sur LinkedIn avec succ√®s !');
        // LinkedIn ne retourne pas un ID de post direct pour les UGC posts de la m√™me mani√®re que Facebook.
        // La r√©ussite est indiqu√©e par un statut 201 Created.
    } catch (error) {
        // Capture les erreurs lors du scrapping Open Graph ou de l'appel `fetch`.
        console.error('‚ö†Ô∏è Erreur lors de la publication sur LinkedIn:', error);
        throw error; // Relance l'erreur pour gestion par la fonction appelante.
    }
}