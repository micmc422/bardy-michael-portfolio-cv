import { get } from '@vercel/edge-config';

/**
 * Publie un article donn√© sur une page Facebook configur√©e.
 * R√©cup√®re le token d'acc√®s de la page et l'ID de la page depuis les sources s√©curis√©es (Edge Config et variables d'environnement).
 * Interagit avec l'API Graph de Facebook pour cr√©er un nouveau post.
 *
 * @param article Un objet contenant les informations essentielles de l'article √† partager.
 * Ex: { title: "Mon Super Article", description: "Une description captivante", url: "https://monblog.com/article-slug" }
 * @returns {Promise<void>} Une promesse qui se r√©sout sans valeur en cas de succ√®s, ou rejette une erreur d√©taill√©e en cas d'√©chec.
 */
export async function postToFacebook(article: { title: string; description: string; url: string }): Promise<void> {
    // === Section 1 : R√©cup√©ration des Informations d'Authentification et de Configuration ===

    // 1. R√©cup√©ration du token d'acc√®s Facebook depuis Vercel Edge Config.
    // C'est la m√©thode recommand√©e pour les secrets qui peuvent changer ou √™tre g√©r√©s dynamiquement.
    const accessToken = await get('facebook_token') as string;

    // V√©rification critique : S'assurer que le token d'acc√®s est disponible.
    // Sans ce token, aucune requ√™te API ne peut √™tre authentifi√©e.
    if (!accessToken) {
        const errorMessage = 'Erreur critique: Le token d\'acc√®s Facebook est manquant dans Edge Config. Impossible de publier.';
        console.error(errorMessage);
        throw new Error(errorMessage); // Lance une erreur pour stopper l'ex√©cution et signaler le probl√®me.
    }

    // 2. R√©cup√©ration de l'ID de la page Facebook depuis les variables d'environnement.
    // Cet ID est sp√©cifique √† la page o√π le post doit √™tre publi√©.
    const pageId = process.env.FACEBOOK_PAGE_ID;

    // V√©rification critique : S'assurer que l'ID de la page est d√©fini.
    if (!pageId) {
        const errorMessage = 'Erreur critique: L\'ID de la page Facebook (FACEBOOK_PAGE_ID) est manquant dans les variables d\'environnement. Impossible de publier.';
        console.error(errorMessage);
        throw new Error(errorMessage);
    }

    // URL de base pour l'API Graph de Facebook pour la publication sur le fil d'actualit√© d'une page.
    const apiUrl = `https://graph.facebook.com/${pageId}/feed`;

    // === Section 2 : Pr√©paration des Donn√©es du Post ===

    // Pr√©paration des param√®tres de la requ√™te.
    // URLSearchParams est utilis√© pour construire une cha√Æne de requ√™te URL s√©curis√©e et correctement encod√©e.
    const params = new URLSearchParams({
        // Le message principal du post, combinant le titre et la description de l'article avec un double saut de ligne pour la lisibilit√©.
        message: `${article.title}\n\n${article.description}`,
        // L'URL de l'article qui sera partag√©e. Facebook va souvent extraire les m√©tadonn√©es Open Graph de cette URL
        // pour g√©n√©rer un aper√ßu riche (titre, image, description) directement dans le post.
        link: article.url,
        // Le token d'acc√®s est inclus en tant que param√®tre de requ√™te pour l'authentification.
        access_token: accessToken
    });

    // === Section 3 : Ex√©cution de la Requ√™te API et Gestion des Erreurs ===

    try {
        // Envoi de la requ√™te HTTP POST √† l'API Graph de Facebook.
        // Les param√®tres sont ajout√©s directement √† l'URL.
        const res = await fetch(`${apiUrl}?${params.toString()}`, {
            method: 'POST',
            // Sp√©cifie le type de contenu de la requ√™te. Important pour que l'API interpr√®te correctement les donn√©es.
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });

        // 5. Gestion de la r√©ponse de l'API.
        // Si la r√©ponse HTTP n'est pas dans la plage 2xx (e.g., 400 Bad Request, 500 Internal Server Error),
        // cela indique une erreur de l'API Facebook.
        if (!res.ok) {
            const errorText = await res.text(); // Tente de r√©cup√©rer le corps de la r√©ponse d'erreur pour des d√©tails.
            const errorMessage = `‚ùå √âchec de la publication Facebook: Statut ${res.status} - ${res.statusText}. D√©tails: ${errorText}`;
            console.error(errorMessage);
            throw new Error(errorMessage); // Relance une erreur avec des informations compl√®tes.
        }

        // Si la publication est r√©ussie, l'API retourne un objet JSON contenant souvent l'ID du post.
        const result = await res.json();
        console.log(`üéâ Article post√© sur Facebook avec succ√®s. ID du post: ${result.id}`);
        // `void` signifie que la fonction n'a pas besoin de retourner une valeur en cas de succ√®s.
    } catch (error) {
        // Capture les erreurs qui peuvent survenir pendant l'appel `fetch` (ex: probl√®mes r√©seau, CORS).
        console.error('‚ö†Ô∏è Erreur inattendue lors de l\'envoi de la requ√™te √† Facebook:', error);
        throw error; // Relance l'erreur pour qu'elle puisse √™tre g√©r√©e par la fonction appelante (dans `route.ts`).
    }
}